package com.chartiq.finsemble.example;

import com.chartiq.finsemble.Finsemble;
import com.chartiq.finsemble.interfaces.CallbackListener;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import org.json.JSONArray;
import org.json.JSONObject;

import javax.swing.*;
import javax.swing.text.DefaultCaret;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Objects;

public class SearchClientFrame {
    private JPanel mainPanel;
    private JButton searchButton;
    private JButton invokeItemActionButton;
    private JButton invokeProviderActionButton;
    private JTextField textName;
    private JButton clearButton;
    private JTextArea textLogs;
    private JButton registerButton;
    private JButton unregisterButton;
    private JPanel asdf;
    private JTextField textInvokeProviderActionTextField;
    private JTextField providerNameTextField;
    private JTextField providerNameUnRegisterTextField;

    private final CallbackListener defaultCallback = ((err, res) -> {
        if (Objects.nonNull(err)) {
            writeLogs(err.toString(4));
        } else {
            writeLogs(res.toString(4));
        }
    });

    private void writeLogs(String text) {
        textLogs.append("\n" + text);
    }

    public SearchClientFrame(Finsemble fsbl) {
        clearButton.addActionListener(e -> textLogs.setText(""));
        DefaultCaret caret = new DefaultCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        textLogs.setCaret(caret);

        searchButton.addActionListener(e ->
                fsbl.getClients().getSearchClient().search(
                        new JSONObject() {{
                            put("text", textName.getText());
                        }},
                        (err, res) -> {
                            StringBuilder result = new StringBuilder("Found:");
                            if (err == null) {
                                JSONArray data = res.getJSONArray("data");
                                for (int i = 0; i < data.length(); i++) {
                                    result.append(" ").append(data.getJSONObject(i).getString("name"));
                                }
                            }
                            defaultCallback.callback(err, new JSONObject() {{
                                put("result", result.toString());
                            }});
                        })
        );

        invokeItemActionButton.addActionListener(e -> {
            JSONObject welcomeItem = new JSONObject("{\"name\":\"Welcome Component\",\"displayName\":\"Welcome Component" +
                    "\",\"score\":0.000001,\"matches\":[{\"indices\":[[0,2]],\"value\":\"Welcome Component\",\"key\":\"" +
                    "component.displayName\",\"arrayIndex\":0},{\"indices\":[[0,2]],\"value\":\"Welcome Component\",\"k" +
                    "ey\":\"component.type\",\"arrayIndex\":0}],\"icon\":{\"type\":\"fonticon\",\"path\":\"ff-component" +
                    "\"},\"type\":\"Application\",\"description\":\"\",\"actions\":[{\"name\":\"Spawn\"}],\"tags\":[],\"" +
                    "provider\":\"ChartIQ Local.Installed Components\"}");

            fsbl.getClients().getSearchClient().invokeItemAction(welcomeItem, defaultCallback);
        });

        invokeProviderActionButton.addActionListener(e ->
                fsbl.getClients().getSearchClient()
                        .invokeProviderAction(textInvokeProviderActionTextField.getText(), defaultCallback)
        );

        registerButton.addActionListener(e -> {
            fsbl.getClients().getSearchClient()
                    .register(providerNameTextField.getText(), defaultCallback, defaultCallback, defaultCallback,
                            providerNameTextField.getText(), defaultCallback
                    );
        });

        unregisterButton.addActionListener(e ->
                fsbl.getClients().getSearchClient().unregister(providerNameUnRegisterTextField.getText(), defaultCallback));
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        asdf = new JPanel();
        asdf.setLayout(new BorderLayout(0, 0));
        mainPanel = new JPanel();
        mainPanel.setLayout(new FormLayout("left:4dlu:noGrow,fill:max(d;4px):noGrow,fill:171px:noGrow,fill:max(d;4px):noGrow,left:72dlu:noGrow,fill:307px:noGrow", "center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:32px:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,top:146dlu:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        mainPanel.setMinimumSize(new Dimension(640, 550));
        mainPanel.setPreferredSize(new Dimension(640, 550));
        asdf.add(mainPanel, BorderLayout.CENTER);
        searchButton = new JButton();
        searchButton.setText("search");
        CellConstraints cc = new CellConstraints();
        mainPanel.add(searchButton, cc.xy(3, 3));
        invokeItemActionButton = new JButton();
        invokeItemActionButton.setText("invokeItemAction");
        mainPanel.add(invokeItemActionButton, cc.xy(3, 5));
        invokeProviderActionButton = new JButton();
        invokeProviderActionButton.setText("invokeProviderAction");
        mainPanel.add(invokeProviderActionButton, cc.xy(3, 7));
        textName = new JTextField();
        textName.setText("name");
        mainPanel.add(textName, cc.xy(5, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        clearButton = new JButton();
        clearButton.setText("Clear");
        mainPanel.add(clearButton, cc.xy(6, 15, CellConstraints.RIGHT, CellConstraints.DEFAULT));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, cc.xyw(3, 13, 4, CellConstraints.FILL, CellConstraints.FILL));
        textLogs = new JTextArea();
        scrollPane1.setViewportView(textLogs);
        registerButton = new JButton();
        registerButton.setText("register");
        mainPanel.add(registerButton, cc.xy(3, 9));
        unregisterButton = new JButton();
        unregisterButton.setText("unregister");
        mainPanel.add(unregisterButton, cc.xy(3, 11));
        textInvokeProviderActionTextField = new JTextField();
        textInvokeProviderActionTextField.setHorizontalAlignment(2);
        textInvokeProviderActionTextField.setText("textInvokeProviderAction");
        mainPanel.add(textInvokeProviderActionTextField, cc.xyw(5, 7, 2, CellConstraints.FILL, CellConstraints.DEFAULT));
        providerNameTextField = new JTextField();
        providerNameTextField.setText("providerName");
        mainPanel.add(providerNameTextField, cc.xy(5, 9, CellConstraints.FILL, CellConstraints.DEFAULT));
        providerNameUnRegisterTextField = new JTextField();
        providerNameUnRegisterTextField.setText("providerName");
        mainPanel.add(providerNameUnRegisterTextField, cc.xy(5, 11, CellConstraints.FILL, CellConstraints.DEFAULT));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return asdf;
    }

}
